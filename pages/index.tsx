import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import TextField from "./components/TextField";
import { useForm } from "react-hook-form";
import { SubmitHandler } from "react-hook-form/dist/types/form";
import z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";

const inter = Inter({ subsets: ["latin"] });

const formSchema = z.object({
  name: z.string({ required_error: "Name is required" }).min(2),
  email: z.string().email({ message: "Invalid email address" }),
  mobile: z
    .number({ invalid_type_error: "Required" })
    .min(10, { message: "min 10" })
    .max(10, { message: "max 10" }),
  age: z.number(),
  state: z.string(),
});

export type formTypes = z.infer<typeof formSchema>;

export default function Home() {
  const {
    register,
    handleSubmit,
    getValues,
    setValue,
    formState: { errors },
  } = useForm<formTypes>({ resolver: zodResolver(formSchema) });
  const onSubmit: SubmitHandler<formTypes> = (data) => {
    console.log(getValues(), "values");
  };

  console.log(errors, "errors");
  useEffect(() => {
    if (getValues("mobile")) {
      setValue("age", 13);
    }
  }, [getValues("mobile")]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <form onSubmit={handleSubmit(onSubmit)}>
          <TextField
            type="text"
            placeholder="name"
            register={register("name")}
          />
          <TextField
            type="text"
            placeholder="email"
            register={register("email")}
          />
          <TextField
            type="number"
            placeholder="number"
            register={register("mobile", { valueAsNumber: true })}
            renderError={() =>
              errors?.mobile ? <p>{errors.mobile.message}</p> : <></>
            }
          />
          <TextField
            type="number"
            placeholder="age"
            register={register("age", { valueAsNumber: true })}
          />
          <select {...register("state")}>
            <option value="shubham">shubham</option>
            <option value="rawat">rawat</option>
          </select>
          <button type="submit">submit</button>
        </form>
      </main>
    </>
  );
}
